plugins{
  id 'com.github.johnrengelman.shadow' version '7.1.2'
}

dependencies {
  api project(':ratly-proto')
  api project(':ratly-common')
  api project(':ratly-client')
  api project(':ratly-grpc')
  api("net.xdob.h2db:h2db:${h2db_version}")
  implementation "ch.qos.logback:logback-core:${logback_version}"
  implementation "ch.qos.logback:logback-classic:${logback_version}"
  testImplementation platform('org.junit:junit-bom:5.10.0')
  testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
  useJUnitPlatform()
}

// Shadow插件配置
shadowJar {
  mergeServiceFiles() // 关键：合并服务文件（解决JDBC驱动注册问题）
//  manifest {
//    attributes 'Main-Class': 'com.yourpackage.MainClass' // 指定主类
//  }
  //archiveBaseName = 'ratly-jdbc-driver'
  // 设置分类器（默认是 'all'，但 Shadow 插件默认使用 'all'，你也可以修改）
  archiveClassifier = 'all'
}

publishing {
  publications {
    shadow(MavenPublication) {
      groupId = project.group
      artifactId = "${project.name}-all"
      version = project.version
      //如果不定义，则会按照以上默认值执行
      // 指定 Shadow JAR 文件
      artifact shadowJar
      pom {
        name = 'ratly'
        description = "Distributed Database with Strong Consistency Based on Raft Protocol"
        // 构件主页
        url = 'https://github.com/dibyang/ratly'
        // 许可证名称和地址
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        // 开发者信息
        developers {
          developer {
            id = 'dib.yang'
            name = 'dib.yang'
            email = 'dib.yang@gmail.com'
          }
        }
        // 版本控制仓库地址
        scm {
          url = 'https://github.com/dibyang/ratly'
          connection = 'scm:git:https://github.com/dibyang/ratly.git'
          developerConnection = 'scm:git:https://github.com/dibyang/ratly.git'
        }
      }
    }
  }
  repositories {
    maven {
      // 发布仓库配置，这里基于version后缀是否为SNAPSHOT来区分发布到release库还是snapshots库
      if(version.endsWith('SNAPSHOT')){
        it.url = project.property("snapshotsRepository")
      }else{
        it.url = project.property("releasesRepository")
      }

      //认证用户和密码，在配置文件gradle.properties中配置
      //oss-sonatype的登录用户名和密码
      credentials {
        username = findProperty("ossrhUsername")?:""
        password = findProperty("ossrhPassword")?:""
      }

    }
  }
}

// 将构建的包签名
signing {
  sign publishing.publications.shadow
}