
package net.xdob.ratly.client.api;

import net.xdob.ratly.protocol.RoutingTable;

import java.io.Closeable;
import java.nio.ByteBuffer;

/**
 * Stream data asynchronously to all the servers in the {@link net.xdob.ratly.protocol.RaftGroup}.
 * Clients may stream data to the nearest server and then the server will forward the data to the other servers.
 * Once all the servers have received all the data of a request,
 * the leader (may or may not be the nearest server) creates a log entry with a data ID generated by the state machine.
 * Then, the leader sends the log entry to the followers.
 * Since the followers already have received the data from the stream,
 * they may lookup the data from the ID.
 *
 * Since this API allows clients to send data to the nearest server which is not necessarily the leader,
 * this API is more efficient for network-topology-aware clusters
 * than the other APIs that require clients to send data/messages to the leader.
 *
 * Note that this API is different from {@link MessageStreamApi} in the sense that
 * this API streams data to all the servers in the {@link net.xdob.ratly.protocol.RaftGroup}
 * but {@link MessageStreamApi} streams messages only to the leader.
 */
public interface DataStreamApi extends Closeable {
  /** Create a stream to write data. */
  default DataStreamOutput stream() {
    return stream(null);
  }

  /** Create a stream by providing a customized header message. */
  DataStreamOutput stream(ByteBuffer headerMessage);

  /** Create a stream by providing a customized header message and route table. */
  DataStreamOutput stream(ByteBuffer headerMessage, RoutingTable routingTable);
}
